[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim") && !exists("g:vscode")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim") && !exists("g:vscode")'

[[plugins]]
repo = 'nixprime/cpsm'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'tyru/nextfile.vim'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:nf_include_dotfiles = 1
  let g:nf_loop_files = 1
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
  autocmd FileType gitcommit let b:EditorConfig_disable = 1
'''

[[plugins]]
repo = 'oza6ut0ne/vim-gnupg'
rev = 'develop'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'neoclide/coc.nvim'
on_if = '!exists("g:vscode")'
build = 'npm ci'

[[plugins]]
repo = 'w0rp/ale'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:ale_enabled = 1
  let g:ale_completion_enabled = 0
  let g:ale_disable_lsp = 1
  let g:ale_sign_column_always = 1
  let g:ale_virtualtext_cursor = 2

  augroup ale
    autocmd!
    autocmd BufEnter * let b:ale_enabled = &modifiable
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let g:surround_no_mappings = 1
  nmap ds     <Plug>Dsurround
  nmap cs     <Plug>Csurround
  nmap cS     <Plug>CSurround
  nmap ys     <Plug>Ysurround
  nmap yS     <Plug>YSurround
  nmap yss    <Plug>Yssurround
  nmap ySs    <Plug>YSsurround
  nmap ySS    <Plug>YSsurround
  xmap ys     <Plug>VSurround
  xmap yS     <Plug>VgSurround
  imap <C-S>  <Plug>Isurround
  imap <C-G>s <Plug>Isurround
  imap <C-G>S <Plug>ISurround
'''

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  function! s:qs_add_underline() abort
    exec 'hi QuickScopePrimary gui=underline cterm=underline' .
    \    ' guifg=' . synIDattr(synIDtrans(hlID('Function')), 'fg', 'gui') .
    \    ' ctermfg=' . synIDattr(synIDtrans(hlID('Function')), 'fg', 'cui')
    exec 'hi QuickScopeSecondary gui=underline cterm=underline' .
    \    ' guifg=' . synIDattr(synIDtrans(hlID('Define')), 'fg', 'gui') .
    \    ' ctermfg=' . synIDattr(synIDtrans(hlID('Define')), 'fg', 'cui')
  endfunction

  augroup qs_colors
    autocmd!
    autocmd ColorScheme * call s:qs_add_underline()
  augroup END

  call s:qs_add_underline()
'''

[[plugins]]
repo = 'simeji/winresizer'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:winresizer_start_key = '<C-q>'
  let g:winresizer_gui_start_key = '<C-q>'
  let g:winresizer_vert_resize = 3
  let g:winresizer_horiz_resize = 1
'''

[[plugins]]
repo = 'puremourning/vimspector'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:vimspector_base_dir = expand('~/.config/vimspector')
  let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
  let g:vimspector_sign_priority = {
  \    'vimspectorBP':         999,
  \    'vimspectorBPCond':     999,
  \    'vimspectorBPDisabled': 999,
  \ }
  nmap <C-k>   <Plug>VimspectorBalloonEval
  xmap <C-k>   <Plug>VimspectorBalloonEval
  nmap <C-F9>  <Plug>VimspectorToggleConditionalBreakpoint
  nmap <F8>    <Plug>VimspectorRunToCursor
  nnoremap <silent> <C-F5>  :<C-u>VimspectorReset<CR>
'''

[[plugins]]
repo = 'Exafunction/windsurf.vim'
if = 'exists("g:codeium_enabled") && !exists("g:ollama_enabled")'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:codeium_disable_bindings = 1
  augroup CodeiumDisabledFiles
    autocmd!
    autocmd! BufRead,BufNewFile .env           Codeium DisableBuffer
    autocmd! BufRead,BufNewFile .env.*         Codeium DisableBuffer
    autocmd! BufRead,BufNewFile .envrc         Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.gpg          Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.asc          Codeium DisableBuffer
    autocmd! BufRead,BufNewFile */pass.*/*.txt Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.yml          Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.yaml         Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.toml         Codeium DisableBuffer
    autocmd! BufRead,BufNewFile *.json         Codeium DisableBuffer
    autocmd! BufRead,BufNewFile rbw            Codeium DisableBuffer
  augroup END

  if !exists("g:codeium_enabled") || exists("g:ollama_enabled")
    let g:codeium_enabled = 0
    call dein#recache_runtimepath()
    echo 'Restart vim to disable codeium completely!'
    finish
  endif

  if exists("g:vscode")
    let g:codeium_enabled = 0
    finish
  endif

  nnoremap <silent> <Space>ai         :CodeiumToggle<CR>:redrawstatus!<CR>
  nnoremap <silent> <Space><Space>AI  :Codeium DisableBuffer<CR>:redrawstatus<CR>
  nnoremap <expr>   <Space><Space>ai  get(b:, 'codeium_enabled', 1) ?
        \ "\<Cmd>Codeium DisableBuffer\<CR>\<Cmd>redrawstatus\<CR>" :
        \ "\<Cmd>Codeium EnableBuffer\<CR>\<Cmd>redrawstatus\<CR>"

  imap <script><silent><nowait><expr> <C-l> codeium#Accept()
  imap <script><silent><nowait><expr> <C-\> codeium#Accept()
  imap <script><silent><nowait><expr> <M-;> codeium#AcceptNextLine()
  imap <script><silent><nowait><expr> <M-'> codeium#AcceptNextWord()
  imap <script><silent><nowait><expr> <C-;> codeium#AcceptNextLine()
  imap <script><silent><nowait><expr> <C-'> codeium#AcceptNextWord()
  imap <M-]> <Cmd>call codeium#CycleOrComplete()<CR>
  imap <M-[> <Cmd>call codeium#CycleCompletions(-1)<CR>
  imap <C-]> <Cmd>call codeium#Clear()<CR>
  imap <expr> <C-n>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ g:codeium_enabled ? "\<Cmd>call codeium#CycleOrComplete()\<CR>" :
        \ "\<C-n>"
  imap <expr> <C-p>
        \ coc#pum#visible() ? coc#pum#prev(1) :
        \ g:codeium_enabled ? "\<Cmd>call codeium#CycleCompletions(-1)\<CR>" :
        \ "\<C-p>"

'''

[[plugins]]
repo = 'oza6ut0ne/ollama.vim'
if = 'exists("g:ollama_enabled")'
on_if = '!exists("g:vscode")'
hook_add = '''
  if !exists("g:ollama_enabled")
    let g:ollama_enabled = 0
    call dein#recache_runtimepath()
    echo 'Restart vim to disable ollama completely!'
    finish
  endif

  if !exists("g:ollama_config")
    let g:ollama_config = {}
  endif

  if !exists("g:ollama_config.base_url")
    let g:ollama_config.base_url = "http://127.0.0.1:11434"
  endif

  if !exists("g:ollama_config.model")
    let g:ollama_config.model = "qwen2.5-coder:1.5b"
    "let g:ollama_config.model = "qwen2.5-coder:3b"
    "let g:ollama_config.model = "deepseek-coder-v2:16b"
  endif

  let g:ollama_config.show_info = 2
  let g:ollama_config.auto_fim = 1
  let g:ollama_config.keymap_trigger = "<C-S-o>"
  let g:ollama_config.keymap_accept_full = "<C-l>"
  let g:ollama_config.keymap_accept_line = "<C-;>"
  let g:ollama_config.keymap_accept_word = "<C-'>"

  function! OllamaToggleWithAdditionalMap() abort
    if g:ollama_enabled
      let g:ollama_enabled = 0
      redrawstatus
      call ollama#disable()
      iunmap <M-;>
      iunmap <M-'>
    else
      let g:ollama_enabled = 1
      redrawstatus
      call ollama#init()
      inoremap <M-;> <C-o>:call ollama#fim_accept('line')<CR>
      inoremap <M-'> <C-o>:call ollama#fim_accept('word')<CR>
    endif
  endfunction

  if g:ollama_enabled
    inoremap <M-;> <C-o>:call ollama#fim_accept('line')<CR>
    inoremap <M-'> <C-o>:call ollama#fim_accept('word')<CR>
  endif

  nnoremap <silent> <Space>ai <Cmd>call OllamaToggleWithAdditionalMap()<CR>
  imap <expr> <C-n>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ g:ollama_enabled ? "\<Cmd>call ollama#fim_inline(v:false, v:false)\<CR>" :
        \ "\<C-n>"

  function! s:ollama_apply_colors() abort
    hi ollama_hl_hint guifg=#ff772f ctermfg=202
    hi ollama_hl_info guifg=#77ff2f ctermfg=119
  endfunction

  augroup ollama_colors
    autocmd!
    autocmd ColorScheme * call s:ollama_apply_colors()
  augroup END

'''
hook_post_source = '''
  if g:ollama_enabled
    call ollama#disable()
  endif
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'luochen1990/rainbow'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:rainbow_active = 1
'''

[[plugins]]
repo = 'hylang/vim-hy'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'sainnhe/everforest'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:everforest_better_performance = 1
  let g:everforest_transparent_background = !has('gui')
  let g:everforest_background = 'hard'
  let g:everforest_ui_contrast = 'high'
  let g:everforest_cursor = 'green'

  function! s:everforest_custom() abort
    if &background == 'dark'
      hi Visual ctermbg=52 guibg=#344d34
      hi StatusLine ctermfg=247 ctermbg=237 guifg=#9da9a0 guibg=#3a454a cterm=bold gui=bold
      hi StatusLineNC ctermfg=245 ctermbg=236 guifg=#859289 guibg=#323c41
      hi QuickScopePrimary cterm=underline ctermfg=159 gui=underline guifg=#b3f6c0
    endif
  endfunction

  augroup EverforestCustom
    autocmd!
    autocmd ColorScheme everforest call s:everforest_custom()
  augroup END
'''

[[plugins]]
repo = 'doums/darcula'
on_if = '!exists("g:vscode")'
hook_add = '''
  function! s:darcula_custom() abort
    unlet g:darcula
    if !has('gui')
      hi Normal ctermbg=None guibg=None
      hi LineNr ctermbg=None guibg=None
      hi SignColumn ctermbg=None guibg=None
      hi GitAddStripe ctermbg=None guibg=None
      hi GitChangeStripe ctermbg=None guibg=None
      hi GitDeleteStripe ctermbg=None guibg=None
      hi ErrorSign ctermbg=None guibg=None
      hi WarningSign ctermbg=None guibg=None
      hi InfoSign ctermbg=None guibg=None
    endif

    let g:gitgutter_sign_removed = 'â–¶'
    hi! link GitGutterAdd GitAddStripe
    hi! link GitGutterChange GitChangeStripe
    hi! link GitGutterDelete GitDeleteStripe

    hi! link ALEError Error
    hi! link ALEWarning CodeWarning
    hi! link ALEInfo CodeInfo
    hi! link ALEErrorSign ErrorSign
    hi! link ALEWarningSign WarningSign
    hi! link ALEInfoSign InfoSign
  endfunction

  augroup DarculaCustom
    autocmd!
    autocmd ColorScheme darcula call s:darcula_custom()
  augroup END
'''

[[plugins]]
repo = 'dracula/vim'
name = 'dracula'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:dracula_colorterm = 0
'''
