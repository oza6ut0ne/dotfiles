[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim") && !exists("g:vscode")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim") && !exists("g:vscode")'

[[plugins]]
repo = 'nixprime/cpsm'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'tyru/nextfile.vim'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:nf_include_dotfiles = 1
  let g:nf_loop_files = 1
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
  autocmd FileType gitcommit let b:EditorConfig_disable = 1
'''

[[plugins]]
repo = 'jamessan/vim-gnupg'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'neoclide/coc.nvim'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'w0rp/ale'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:ale_enabled = 1
  let g:ale_completion_enabled = 0
  let g:ale_disable_lsp = 1
  let g:ale_sign_column_always = 1

  augroup ale
    autocmd!
    autocmd BufEnter * let b:ale_enabled = &modifiable
  augroup END
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let g:surround_no_mappings = 1
  nmap ds     <Plug>Dsurround
  nmap cs     <Plug>Csurround
  nmap cS     <Plug>CSurround
  nmap ys     <Plug>Ysurround
  nmap yS     <Plug>YSurround
  nmap yss    <Plug>Yssurround
  nmap ySs    <Plug>YSsurround
  nmap ySS    <Plug>YSsurround
  xmap ys     <Plug>VSurround
  xmap yS     <Plug>VgSurround
  imap <C-S>  <Plug>Isurround
  imap <C-G>s <Plug>Isurround
  imap <C-G>S <Plug>ISurround
'''

[[plugins]]
repo = 'unblevable/quick-scope'
hook_add = '''
  function! s:qs_add_underline() abort
    exec 'hi QuickScopePrimary gui=underline cterm=underline' .
    \    ' guifg=' . synIDattr(synIDtrans(hlID('Function')), 'fg', 'gui') .
    \    ' ctermfg=' . synIDattr(synIDtrans(hlID('Function')), 'fg', 'cui')
    exec 'hi QuickScopeSecondary gui=underline cterm=underline' .
    \    ' guifg=' . synIDattr(synIDtrans(hlID('Define')), 'fg', 'gui') .
    \    ' ctermfg=' . synIDattr(synIDtrans(hlID('Define')), 'fg', 'cui')
  endfunction

  augroup qs_colors
    autocmd!
    autocmd ColorScheme * call s:qs_add_underline()
  augroup END

  call s:qs_add_underline()
'''

[[plugins]]
repo = 'puremourning/vimspector'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:vimspector_base_dir = expand('~/.config/vimspector')
  let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
  let g:vimspector_sign_priority = {
  \    'vimspectorBP':         999,
  \    'vimspectorBPCond':     999,
  \    'vimspectorBPDisabled': 999,
  \ }
  nmap <C-q>   <Plug>VimspectorBalloonEval
  xmap <C-q>   <Plug>VimspectorBalloonEval
  nmap <C-F9>  <Plug>VimspectorToggleConditionalBreakpoint
  nmap <F8>    <Plug>VimspectorRunToCursor
  nnoremap <silent> <C-F5>  :<C-u>VimspectorReset<CR>
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_if = '!exists("g:vscode")'

[[plugins]]
repo = 'sainnhe/everforest'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:everforest_better_performance = 1
  let g:everforest_transparent_background = 1
  let g:everforest_background = 'hard'
  let g:everforest_ui_contrast = 'high'
  let g:everforest_cursor = 'green'

  function! s:everforest_custom() abort
    if &background == 'dark'
      hi Visual ctermbg=52 guibg=#344d34
      hi StatusLine ctermfg=247 ctermbg=237 guifg=#9da9a0 guibg=#3a454a cterm=bold gui=bold
      hi StatusLineNC ctermfg=245 ctermbg=236 guifg=#859289 guibg=#323c41
    endif
  endfunction

  augroup EverforestCustom
    autocmd!
    autocmd ColorScheme everforest call s:everforest_custom()
  augroup END
'''

[[plugins]]
repo = 'doums/darcula'
on_if = '!exists("g:vscode")'
hook_add = '''
  function! s:darcula_custom() abort
    unlet g:darcula
    hi Normal ctermbg=None guibg=None
    hi LineNr ctermbg=None guibg=None
    hi SignColumn ctermbg=None guibg=None
    hi GitAddStripe ctermbg=None guibg=None
    hi GitChangeStripe ctermbg=None guibg=None
    hi GitDeleteStripe ctermbg=None guibg=None
    hi ErrorSign ctermbg=None guibg=None
    hi WarningSign ctermbg=None guibg=None
    hi InfoSign ctermbg=None guibg=None

    let g:gitgutter_sign_removed = 'â–¶'
    hi! link GitGutterAdd GitAddStripe
    hi! link GitGutterChange GitChangeStripe
    hi! link GitGutterDelete GitDeleteStripe

    hi! link ALEError Error
    hi! link ALEWarning CodeWarning
    hi! link ALEInfo CodeInfo
    hi! link ALEErrorSign ErrorSign
    hi! link ALEWarningSign WarningSign
    hi! link ALEInfoSign InfoSign
  endfunction

  augroup DarculaCustom
    autocmd!
    autocmd ColorScheme darcula call s:darcula_custom()
  augroup END
'''

[[plugins]]
repo = 'dracula/vim'
name = 'dracula'
on_if = '!exists("g:vscode")'
hook_add = '''
  let g:dracula_colorterm = 0
'''
