[core]
	quotepath = false
[diff]
    tool = vimdiff
    algorithm = histogram
    indentHeuristic = true
    colorMoved = dimmed-zebra
    colorMovedWS = allow-indentation-change
[difftool]
    prompt = false
[merge]
    ff = false
    tool = vimdiff
    conflictStyle = diff3
[mergetool]
    prompt = false
    keepBackup = false
[pull]
    ff = only
[push]
    useForceIfIncludes = true
[pager]
    log = which diff-highlight >/dev/null && diff-highlight | less || less
    show = which diff-highlight >/dev/null && diff-highlight | less || less
    diff = which diff-highlight >/dev/null && diff-highlight | less || less
[alias]
    logg = log --graph --all --pretty=format:'%C(yellow)%h %G?%C(auto)%d %s %C(magenta)(%cd) %C(bold blue)<%an>' --date=relative
    loge = log --graph --all --pretty=format:'%C(yellow)%h %G?%C(auto)%d %s %C(magenta)(%cd) %C(bold blue)<%an> %C(cyan)[%ae]' --date=relative
    logf = log --graph --all --pretty=format:'%C(yellow)%h %G?%C(auto)%d %s %C(magenta)(%ad) (%cd) %C(bold blue)<%an> <%cn>' --date=relative
    logef = log --graph --all --pretty=format:'%C(yellow)%h %G?%C(auto)%d %s %C(magenta)(%ad) (%cd) %C(bold blue)<%an> <%cn> %C(cyan)[%ae] [%ce]' --date=relative
    logd = logg --date=format-local:'%F %T'
    logde = loge --date=format-local:'%F %T'
    logdf = logf --date=format-local:'%F %T'
    logdef = logef --date=format-local:'%F %T'
    loga = "!f() { git logg $(git rev-list --reflog) $@; }; f"
    logea = "!f() { git loge $(git rev-list --reflog) $@; }; f"
    logfa = "!f() { git logf $(git rev-list --reflog) $@; }; f"
    logefa = "!f() { git logef $(git rev-list --reflog) $@; }; f"
    logda = "!f() { git logd $(git rev-list --reflog) $@; }; f"
    logdea = "!f() { git logde $(git rev-list --reflog) $@; }; f"
    logdfa = "!f() { git logdf $(git rev-list --reflog) $@; }; f"
    logdefa = "!f() { git logdef $(git rev-list --reflog) $@; }; f"
    showtool = "!f() { rev=$(git rev-parse \"${*:-HEAD}\"); git difftool $rev~1 $rev; }; f"
    codate = "!f() { rev=$(git rev-list -n 1 --first-parent --before=$1 $2) && shift 2 && git checkout $rev $@; }; f"
    recommit = commit --edit --file=.git/COMMIT_EDITMSG
    now = "!f() { git diff --no-ext-diff --cached --quiet && git add .; git commit -m \"[now] `date '+%Y/%m/%d %H:%M:%S'`\" $@; }; f"
    root = rev-parse --show-toplevel
    undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
[ghq]
    root = ~/ghq
[include]
    path = ~/.gitconfig.local
